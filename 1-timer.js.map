{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\"\nimport \"flatpickr/dist/flatpickr.min.css\"\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\"\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates, instance) {\n      dateInPicker = selectedDates[0].getTime()\n      button.disabled = false\n    },\n};\n\nvar dateInPicker = Date.now()\nconst dataSelector = document.querySelector(\"#datetime-picker\")\nconst timerElement = document.querySelector('.value');\nconst timerElements = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\nconst button = document.querySelector('[data-start]');\nlet intervalId = null\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  \n  // Remaining days\n  const days = Math.floor(ms / day)\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour)\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute)\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second)\n  \n  return { days, hours, minutes, seconds }\n}\n\n\nconst dataPick = flatpickr(dataSelector, options)\n\nbutton.addEventListener('click', function() {\n  button.disabled = true\n  clearInterval(intervalId)\n  const fixedDate = dateInPicker\n  if(Date.now() >= fixedDate) {\n    iziToast.error({\n      title: 'Wrong date',\n      message: 'Please choose a date in the future'})\n      return\n  }\n  intervalId = setInterval(() => {\n    const timeArray = convertMs(fixedDate - Date.now())\n    if (Date.now() >= fixedDate) {\n      clearInterval(intervalId)\n      iziToast.success({\n        title: 'Done',\n        message: 'Time!'})\n    } else {\n    for (const key in timerElements) {\n      if (timerElements[key]) { \n          timerElements[key].textContent = timeArray[key]\n      }\n    }\n  }\n  }, 1000)\n\n})"],"names":["options","selectedDates","instance","dateInPicker","button","dataSelector","timerElements","intervalId","convertMs","ms","days","hours","minutes","seconds","flatpickr","fixedDate","iziToast","timeArray","key"],"mappings":"+IAMA,MAAMA,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAeC,EAAU,CAC/BC,EAAeF,EAAc,CAAC,EAAE,QAAS,EACzCG,EAAO,SAAW,EACnB,CACL,EAEA,IAAID,EAAe,KAAK,IAAK,EAC7B,MAAME,EAAe,SAAS,cAAc,kBAAkB,EACzC,SAAS,cAAc,QAAQ,EACpD,MAAMC,EAAgB,CACpB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EACMF,EAAS,SAAS,cAAc,cAAc,EACpD,IAAIG,EAAa,KAEjB,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC1C,CAGiBC,EAAUT,EAAcL,CAAO,EAEhDI,EAAO,iBAAiB,QAAS,UAAW,CAC1CA,EAAO,SAAW,GAClB,cAAcG,CAAU,EACxB,MAAMQ,EAAYZ,EAClB,GAAG,KAAK,IAAK,GAAIY,EAAW,CAC1BC,EAAS,MAAM,CACb,MAAO,aACP,QAAS,oCAAoC,CAAC,EAC9C,MACH,CACDT,EAAa,YAAY,IAAM,CAC7B,MAAMU,EAAYT,EAAUO,EAAY,KAAK,IAAG,CAAE,EAClD,GAAI,KAAK,IAAK,GAAIA,EAChB,cAAcR,CAAU,EACxBS,EAAS,QAAQ,CACf,MAAO,OACP,QAAS,OAAO,CAAC,MAErB,WAAWE,KAAOZ,EACZA,EAAcY,CAAG,IACjBZ,EAAcY,CAAG,EAAE,YAAcD,EAAUC,CAAG,EAIrD,EAAE,GAAI,CAET,CAAC"}